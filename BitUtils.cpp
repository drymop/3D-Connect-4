#include "BitUtils.h"

namespace bit_utils
{
  uint_fast16_t bit_rotate_table[256] = {
    0x0000, 0x1000, 0x0100, 0x1100, 0x0010, 0x1010, 0x0110, 0x1110, 
    0x0001, 0x1001, 0x0101, 0x1101, 0x0011, 0x1011, 0x0111, 0x1111, 
    0x2000, 0x3000, 0x2100, 0x3100, 0x2010, 0x3010, 0x2110, 0x3110, 
    0x2001, 0x3001, 0x2101, 0x3101, 0x2011, 0x3011, 0x2111, 0x3111, 
    0x0200, 0x1200, 0x0300, 0x1300, 0x0210, 0x1210, 0x0310, 0x1310, 
    0x0201, 0x1201, 0x0301, 0x1301, 0x0211, 0x1211, 0x0311, 0x1311, 
    0x2200, 0x3200, 0x2300, 0x3300, 0x2210, 0x3210, 0x2310, 0x3310, 
    0x2201, 0x3201, 0x2301, 0x3301, 0x2211, 0x3211, 0x2311, 0x3311, 
    0x0020, 0x1020, 0x0120, 0x1120, 0x0030, 0x1030, 0x0130, 0x1130, 
    0x0021, 0x1021, 0x0121, 0x1121, 0x0031, 0x1031, 0x0131, 0x1131, 
    0x2020, 0x3020, 0x2120, 0x3120, 0x2030, 0x3030, 0x2130, 0x3130, 
    0x2021, 0x3021, 0x2121, 0x3121, 0x2031, 0x3031, 0x2131, 0x3131, 
    0x0220, 0x1220, 0x0320, 0x1320, 0x0230, 0x1230, 0x0330, 0x1330, 
    0x0221, 0x1221, 0x0321, 0x1321, 0x0231, 0x1231, 0x0331, 0x1331, 
    0x2220, 0x3220, 0x2320, 0x3320, 0x2230, 0x3230, 0x2330, 0x3330, 
    0x2221, 0x3221, 0x2321, 0x3321, 0x2231, 0x3231, 0x2331, 0x3331, 
    0x0002, 0x1002, 0x0102, 0x1102, 0x0012, 0x1012, 0x0112, 0x1112, 
    0x0003, 0x1003, 0x0103, 0x1103, 0x0013, 0x1013, 0x0113, 0x1113, 
    0x2002, 0x3002, 0x2102, 0x3102, 0x2012, 0x3012, 0x2112, 0x3112, 
    0x2003, 0x3003, 0x2103, 0x3103, 0x2013, 0x3013, 0x2113, 0x3113, 
    0x0202, 0x1202, 0x0302, 0x1302, 0x0212, 0x1212, 0x0312, 0x1312, 
    0x0203, 0x1203, 0x0303, 0x1303, 0x0213, 0x1213, 0x0313, 0x1313, 
    0x2202, 0x3202, 0x2302, 0x3302, 0x2212, 0x3212, 0x2312, 0x3312, 
    0x2203, 0x3203, 0x2303, 0x3303, 0x2213, 0x3213, 0x2313, 0x3313, 
    0x0022, 0x1022, 0x0122, 0x1122, 0x0032, 0x1032, 0x0132, 0x1132, 
    0x0023, 0x1023, 0x0123, 0x1123, 0x0033, 0x1033, 0x0133, 0x1133, 
    0x2022, 0x3022, 0x2122, 0x3122, 0x2032, 0x3032, 0x2132, 0x3132, 
    0x2023, 0x3023, 0x2123, 0x3123, 0x2033, 0x3033, 0x2133, 0x3133, 
    0x0222, 0x1222, 0x0322, 0x1322, 0x0232, 0x1232, 0x0332, 0x1332, 
    0x0223, 0x1223, 0x0323, 0x1323, 0x0233, 0x1233, 0x0333, 0x1333, 
    0x2222, 0x3222, 0x2322, 0x3322, 0x2232, 0x3232, 0x2332, 0x3332, 
    0x2223, 0x3223, 0x2323, 0x3323, 0x2233, 0x3233, 0x2333, 0x3333
  };

  uint_fast16_t bit_reverse_table[256] = {
    0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0, 
    0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0, 
    0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8, 
    0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8, 
    0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4, 
    0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4, 
    0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec, 
    0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc, 
    0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2, 
    0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2, 
    0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea, 
    0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa, 
    0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6, 
    0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6, 
    0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee, 
    0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe, 
    0x01, 0x81, 0x41, 0xc1, 0x21, 0xa1, 0x61, 0xe1, 
    0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1, 
    0x09, 0x89, 0x49, 0xc9, 0x29, 0xa9, 0x69, 0xe9, 
    0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9, 
    0x05, 0x85, 0x45, 0xc5, 0x25, 0xa5, 0x65, 0xe5, 
    0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5, 
    0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xad, 0x6d, 0xed, 
    0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd, 
    0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3, 
    0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3, 
    0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb, 
    0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb, 
    0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7, 
    0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7, 
    0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef, 
    0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff
  };

  uint_fast16_t 
  rotate(uint_fast16_t x)
  {
    return ((bit_rotate_table[x >> 8] << 2) | (bit_rotate_table[x & 0xff])) & 0xffff;
  }

  uint_fast16_t 
  reverse(uint_fast16_t x)
  {
    return bit_reverse_table[x >> 8] | (bit_reverse_table[x & 0xff] << 8); 
  }
}